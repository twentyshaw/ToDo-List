{"version":3,"sources":["components/input.js","components/items.js","App.js","serviceWorker.js","index.js"],"names":["Input","type","defaultValue","this","props","content","onKeyPress","submit","bind","e","key","submitOn","React","Component","Item","items","ToDo","map","item","title","className","App","state","newTodo","index","toDoLists","id","add","undefined","console","log","push","idMaker","target","value","setState","alert","number","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOAeeA,G,6LAXP,OACI,2BAAOC,KAAK,OAAOC,aAAcC,KAAKC,MAAMC,QAASC,WAAYH,KAAKI,OAAOC,KAAKL,U,6BAGnFM,GACW,UAAVA,EAAEC,KACFP,KAAKC,MAAMO,SAASF,O,GARZG,IAAMC,YCeXC,E,iLAbP,IAAIC,EAAQZ,KAAKC,MAAMY,KAAKC,IAAI,SAAAC,GAC5B,OACA,4BACI,4BAAKA,EAAKC,OACV,uBAAGC,UAAU,WAAWF,EAAKb,YAIrC,OACI,4BAAKU,O,GAXEH,IAAMC,WC+EVQ,E,YAzEb,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACXC,QAAS,GACTC,MAAO,EACPC,UAAW,CACT,CAACC,GAAG,EAAKF,MAAOL,MAAM,UAAUd,QAAQ,8BANjC,E,sEAYX,OACE,yBAAKe,UAAU,OACb,4BAAQA,UAAU,cAChB,0BAAMA,UAAU,OAAhB,OAA0B,uBAAGA,UAAU,yBAEzC,yBAAKA,UAAU,OACb,wDACA,yBAAKA,UAAU,SACb,kBAAC,EAAD,CAAOf,QAASF,KAAKmB,MAAMC,QAASZ,SAAUR,KAAKwB,IAAInB,KAAKL,QAC5D,4BAAQiB,UAAU,OAAM,uBAAGA,UAAU,6BAGzC,yBAAKA,UAAU,SAAQ,kBAAC,EAAD,CAAMJ,KAAMb,KAAKmB,MAAMG,gB,0BAKhDhB,QACsBmB,IAArBzB,KAAKmB,MAAME,MACTrB,KAAKmB,MAAME,MAAM,GAClBK,QAAQC,IAAI3B,KAAKmB,MAAMG,WACvBtB,KAAKmB,MAAMG,UAAUM,KAAK,CACxBL,GAAIvB,KAAK6B,UACTb,MAAM,SAAD,OAAWhB,KAAKmB,MAAME,OAC3BnB,QAASI,EAAEwB,OAAOC,QAEpB/B,KAAKgC,SAAS,CACZZ,QAAS,GACTE,UAAWtB,KAAKmB,MAAMG,cAGxBtB,KAAKgC,SAAS,CACZV,UAAW,CACT,CAACC,GAAG,IACJP,MAAM,UAAUd,QAAQI,EAAEwB,OAAOC,UAGrC/B,KAAK6B,WAGPI,MAAM,sD,gCAKR,GAAGjC,KAAKmB,MAAME,MAAM,EAAE,CACpB,IAAIa,EAASlC,KAAKmB,MAAME,MAAQ,EAChCrB,KAAKgC,SAAS,CACZX,MAAOa,SAGTlC,KAAKgC,SAAS,CACZX,WAAOI,IAIXC,QAAQC,IAAI3B,KAAKmB,MAAME,W,GArETZ,IAAMC,WCKJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.30895437.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Input extends React.Component{\r\n    render(){\r\n        return(\r\n            <input type=\"text\" defaultValue={this.props.content} onKeyPress={this.submit.bind(this)}/>\r\n        )\r\n    }\r\n    submit(e){\r\n        if (e.key === 'Enter') {\r\n            this.props.submitOn(e)        \r\n        }\r\n    }\r\n}\r\n\r\nexport default Input","import React from 'react';\r\n\r\nclass Item extends React.Component{\r\n    render(){\r\n        let items = this.props.ToDo.map(item=>{\r\n            return (\r\n            <li>\r\n                <h3>{item.title}</h3>\r\n                <p className='content'>{item.content}</p>\r\n            </li>\r\n            )\r\n        })\r\n        return(\r\n            <ol>{items}</ol>\r\n        )\r\n    }\r\n}\r\nexport default Item","import React from 'react';\nimport 'normalize.css';\nimport './App.css';\nimport Input from './components/input';\nimport Item from './components/items'\n\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      newTodo: '',\n      index: 1,\n      toDoLists: [\n        {id:this.index, title:'GOAL 01',content:'等待添加'}\n      ]\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <span className=\"ttl\">ToDo<i className=\"iconfont icon-todo\"></i></span>\n        </header>\n        <div className=\"top\">\n          <h1>今日目标</h1>\n          <div className=\"input\">\n            <Input content={this.state.newTodo} submitOn={this.add.bind(this)}/>\n            <button className=\"add\"><i className=\"iconfont icon-zhuijia\"></i></button>\n          </div>\n        </div>\n        <div className=\"items\"><Item ToDo={this.state.toDoLists}/></div>\n      </div>\n    )\n  }\n\n  add(e){\n    if(this.state.index !== undefined){\n      if(this.state.index>1){\n        console.log(this.state.toDoLists)\n        this.state.toDoLists.push({\n          id: this.idMaker(),\n          title: `GOAL 0${this.state.index}`,\n          content: e.target.value\n        })\n        this.setState({\n          newTodo: '',\n          toDoLists: this.state.toDoLists\n        })\n      }else{\n        this.setState({\n          toDoLists: [\n            {id:'1', \n            title:'GOAL 01',content:e.target.value}\n          ]\n        })\n        this.idMaker()\n      }\n    }else{\n      alert(\"已达到添加上限！\")\n    }\n  }\n\n  idMaker(){\n    if(this.state.index<5){\n      let number = this.state.index + 1\n      this.setState({\n        index: number\n      })\n    }else{\n      this.setState({\n        index: undefined\n      })\n    }\n\n    console.log(this.state.index)\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}