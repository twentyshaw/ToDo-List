{"version":3,"sources":["components/input.js","components/items.js","App.js","localstorage.js","serviceWorker.js","index.js"],"names":["Input","type","value","this","props","content","onChange","changeCont","bind","onKeyPress","submit","e","key","submitOn","React","Component","Item","checked","ToDo","status","toggle","title","className","onClick","delete","console","log","onToggle","onDelete","App","state","newTodo","index","toDoLists","JSON","parse","window","localStorage","getItem","id","deleted","todos","filter","item","map","todo","add","setItem","stringify","setState","target","push","idMaker","number","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a80a6191.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Input extends React.Component{\r\n    render(){\r\n        return(\r\n            <input type=\"text\" \r\n            value={this.props.content}\r\n            onChange={this.changeCont.bind(this)} \r\n            onKeyPress={this.submit.bind(this)}/>\r\n        )\r\n    }\r\n\r\n    changeCont(e){\r\n        this.props.onChange(e)\r\n    }\r\n\r\n    submit(e){\r\n        if (e.key === 'Enter') {\r\n            this.props.submitOn(e)        \r\n        }\r\n    }\r\n}\r\n\r\nexport default Input","import React from 'react';\r\n\r\nclass Item extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <input type=\"checkbox\" \r\n                checked={this.props.ToDo.status === 'completed'}\r\n                onChange={this.toggle.bind(this)}/>\r\n                <h3>{this.props.ToDo.title}</h3>\r\n                <p className={\"content \"+this.props.ToDo.status}>{this.props.ToDo.content}</p>\r\n                <button className=\"btn delete\" onClick={this.delete.bind(this)}><i className=\"iconfont icon-delete\"></i></button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    toggle(e){\r\n        console.log(this.props.ToDo.status)\r\n        this.props.onToggle(e,this.props.ToDo)\r\n    }\r\n\r\n    delete(e){\r\n        this.props.onDelete(e,this.props.ToDo)\r\n    }\r\n}\r\nexport default Item","import React from 'react';\nimport 'normalize.css';\nimport './App.css';\nimport Input from './components/input';\nimport Item from './components/items';\nimport * as localStore from './localstorage'\n\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      newTodo: '',\n      index: 0,\n      toDoLists: localStore.load('toDoLists') || [\n        {id:this.index, \n         title:'GOAL',\n         content:'等待添加',\n         status:null,\n         deleted: false}\n      ]\n    }\n  }\n\n  render(){\n    let todos = this.state.toDoLists.filter(item => item.deleted !== true).map(todo=>{\n      return (\n      <li className={this.state.toDoLists.id}>\n          <Item ToDo={todo}\n                onToggle={this.toggle.bind(this)}\n                onDelete={this.delete.bind(this)}/>\n      </li>\n      )\n    })\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <span className=\"ttl\">ToDo<i className=\"iconfont icon-todo\"></i></span>\n        </header>\n        <div className=\"top\">\n          <h1>今日目标</h1>\n          <div className=\"input\">\n            <Input \n            content={this.state.newTodo}\n            onChange={this.changeCont.bind(this)} \n            submitOn={this.add.bind(this)}/>\n            <button className=\"btn add\"><i className=\"iconfont icon-zhuijia\"></i></button>\n          </div>\n        </div>\n        <div className=\"items\">\n          <ol>{todos}</ol>\n        </div>\n      </div>\n    )\n  }\n\n  componentDidUpdate(){\n    localStore.save('toDoLists',this.state.toDoLists)\n  }\n\n  changeCont(e){\n    this.setState({\n      newTodo: e.target.value\n    })\n  }\n\n  add(e){\n      if(this.state.index>0){\n        this.state.toDoLists.push({\n          id: this.idMaker(),\n          title: \"GOAL\",\n          content: e.target.value,\n          status:null,\n          deleted: false\n        })\n        this.setState({\n          newTodo: '',\n          toDoLists: this.state.toDoLists\n        })\n      }else{\n        this.setState({\n          newTodo: '',\n          toDoLists: [\n            {id: 1, \n            title:\"GOAL\",\n            content:e.target.value,\n            status:null,\n            deleted: false}]\n        })\n        this.idMaker()\n      }\n  }\n\n  idMaker(){\n      let number = this.state.index + 1\n      this.setState({\n        index: number\n      })\n      return number\n  }\n\n  toggle(e,todo){\n    console.log(todo.status)\n    todo.status = todo.status === 'completed' ? '' : 'completed'\n    this.setState(this.state) \n    console.log(todo.status)\n  }\n\n  delete(e,todo){\n    todo.deleted = true\n    this.setState({\n      deleted:true\n    })\n  }\n\n}\n\nexport default App;\n","export function save(key,value){\r\n    return window.localStorage.setItem(key,JSON.stringify(value))\r\n}\r\n\r\nexport function load(key){\r\n    return JSON.parse(window.localStorage.getItem(key))         \r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}